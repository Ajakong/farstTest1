exeってなに？人間には読めないもの
でも、デバッグしたときにどの関数のどの行で壊れたかわかります
なんで？
デバッグシンボルファイルというのが、exe作ったときに出力されている。pdb(プログラムデバッグデータベース)
これが「関数名」「変数名」と実行時のアドレスを紐づけている
ただし、この紐づけが正確なのはDebug時だけです
Releaseの時は正確じゃなくなります。なぜか
Releaseはビルド時に最適化を行っている。最適化とは
実行速度を早くすること
1.無駄な処理を省く
2.順番を入れ替える(二次元配列などにアクセスする際に近いものの方が早くなる)
3.効率的な関数を使用する(SIMD関数)
最適化によってこういうことをされているため、書いたプログラムと
実行されるプログラムが全く別物になっています。それがReleaseです
Debugの場合は、exeの中にデバッグのために情報も入りまくってるんで
セキュリティにもよくない

クラッシュしたときはまず周りの変数を見る
よくあるのがemptyやnullptrにアクセスしている
emptyはshared_ptrやlistやvectorで発生する
その場合はたいてい「右辺値を入れていない、削除した、メモリの場所が変わった」

メモリの場所が変わるのは、vectirでpush_backをしたときメモリを確保できる隙間がなかったら
確保できる場所にメモリを確保してそこに値を入れなおすためもとの場所アドレスはemptyになる

バグをわかりやすくする
	マジックナンバーはやめましょう！
	IDは絶対マジックナンバーはやめましょう
	->Warningを無視しない、その都度対応
	
	配列の扱いについて
		特定のインデックスに依存しない書き方にしましょう
		[5]だったら、ボスとかそういうのはやめましょう
			->そのためにポリモーフィズムがあります
			中身(値)に依存するのはOK
				特にvectorはサイズが変更される前提なので、インデックスとか
				すぐに変化します。この結果特定のインデックス依存だとバグが
				起きやすいです
				
		名前を適切にしましょう(なんとなくでつけない)
			基本的に関数名は
			動詞・目的語・修飾子の順に並べましょう
				修飾子は、目的語につくか、そうでないかで考えましょう
				基本的にVOCでつけてください
				MoveStartPosition
			変数名は
				修飾子・名詞の順に並べましょう
					PlayerPosition
				混同しないようにしましょう
		クラス名なども、名詞のルールでつけましょう
			Player
			Actor
			BackGround
			なるべくシンプルなものにしましょう
			

・コードの統一感がないコードもありました
	変数の命名規約が統一されてない
		変数はcamelCaseなのか、snake_caseなのか
		関数はどうか
		変数はどうか
		型はCamelCaseなのか?snake_caseなのか
		先頭が小文字なのか、大文字なのか
		

デバッガの使い方
	Releaseでデバッグしない













ジャンプについて
	前は重力をコントロールいてじゅんぷの高さを変えてみます
		->そっちのほうが自然に見える
			重力そのものは定数とする
			浪江お帰るか、重力の発生タイミングを遅らせます
			
スクロールを適切に動かすには「カメラの概念が必要です」
カメラのルール
	1.通常のアクションなら、プレイヤーの中心に
	2.格闘ゲームならお互いの中間地点を中心に
	3.ステージ橋でカメラは停止する
	
表示物もカメラを意識して表示する
	カメラの座標をもとの座標から引く
	その座標に表示する
	
左上中心同士の矩形の当たり判定の場合
右側にあるとき、左側の時、中に入っているときの判別がややこしい

中心に基準がある矩形の当たり判定
楽
	