エンディアン
・ビッグエンディアン
・リトルエンディアン

実際のデータをどうメモリ(ストレージ)に記録するかの
規格(方式)
CPUによって違う
大雑把に言うと、MacとWindowsで違う(iphoneとandroid)

int a = 2000;
2000=000007D0

これ4バイトですが、実際のメモリには1バイトずつ
記録されていきます。この記録のされ方がCPUによって違う

まず、素直に記録する方式
00 00 07 D0
と記録される。ところが、別のCPUだと
D0 07 00 00
と記録される(1バイトずつひっくり返る)

CSV(Comma,Separated,Value)
1,2,3,4,5
のような感じで、記録されているものです。
昔はこればっかり使われていました。その名残で
(今でもお役所的なところではよくつかわれてるらしい)
このため、csvはエクセルで開くことができて
,で区切られたデータがそれぞれのセルに入る
置換することで配列データなどに出来るが

じゃあ、その配列をそのままステージデータにすればいいか
->昔の開発だったらそれはありでした。

今の開発って、イテレーションを早く回すことが要求されます
->トライアル&エラーをできる限り繰り返したい。
->分業化が進んでる(レベルデザイナーという職業がある)
という流れで、もうマップデータは外部データ化されるようになりました
<-ソースコードをいじらなくても、ステージの内容を
変更できるようにしたい

->外部データ化
この時
csvだと扱いづらい
	->csvはテキストなので、,で区切っていって、その上で
	文字列->数値への変換が必要
->非常に扱いづらい&重い
->バイナリで扱えば一気に読み込めるし、そのまま
ステージデータに出来る

Platinumの場合fmfというファイルがあります

Stageの内部に
using MapDate_t = std::vector<std::vector<uint64_t>>;
というのを持っています
これは3次元配列としてのvectorです
なんで3次元なのか・・・

まず、縦横で2次元ではないです
マップそのものは一次元で二次元を表現します
二次元はレイヤーのデータだと思ってください

いずれ、皆さんが直面しなきゃいけない数学の分野

基本的な部分:ベクトル・行列(微積、三角関数、数列、指数関数)
・線形代数(ベクトル行列のお化け)
・解析学(微積のお化け+三角関数+指数対数)
・統計学(確率統計のお化け<-平均、分散)
・(代数学)

ChatGPTとかPythonとかがもてはやされていますが、このビッグウェーブも
いつ収まるのかはわからない


ちょっと今のデータ形式は横スクロールとして使いづらい
横スクロールの場合は横に長いので、そのまま使おうとすると
表示しなくてもいいでデータまで処理してします

また、アクション気⁰むの場合は下が基準になるので、上からならべないほうがいい

そこでロード時にまず縦横の入れ替えを行う


