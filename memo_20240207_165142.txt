なるべく締め切りのあるイベントに参加しよう
	->見積能力を上げていくため
		->就活で効いてくる(聞いてくる)
	->取捨選択できるか(優先事項)
		何が優先で、何がそうではないのか
			そうではない部分を切って捨てれるのか
			
ほぼ、あと一週間で何ができるのか？
	・面白さを上げることはほぼできません(逆効果)
	・面白そうさを上げることは可能
	・とにかく、うるさく派手に
		・ポジティブ->クリア時に花火出す
		・ネガティブ->ダメージ時のエフェクト(SE)や画面揺れ
		とにかく目も引くように(パチンコ屋さん)
		
そういえば、画面揺れについて・・・
	画面揺れって何？
	->画面全体が細かく上下や左右に振動する
	3Dだったら、カメラを動かすことでこれを表現する
	でも、2Dの場合、表示する座標はDrawGraph等で決めてしまっている
	
	これを揺らすって結構大変
	->力技でやろうとすると、「すべての」DrawGraphにoffsetを+
		しておいて、このoffsetを上下左右に振動させる//このやり方は力技で手間がかかりすぎる
		
ここで、登場するのが「レンダーターゲット」の概念です。
	RenderTarget->描画する対象(のメモリ(VRAM))のことです。
	実は知らないうちに、RenderTargetを使っている
	なにか・・・？
	DX_SCREEN_BACK<-RenderTarget
	SetDrawScreen(DX_SCREEN_BACK)というのは、Drawの書き込み先を
	いわゆるバックバッファにしますよ。という意味です
	
	Dxlibでは、子の書き込み先を新しく作って、そこを指定することができます
	また、その書き込み先はテクスチャとして使うことができます。
	MakeScreenで作ることができます
	
じゃあどうするのか
	まず、メインループに入る前(入った後でもいいけど一度だけ)
	MakeScreenで、新しい書き込み先を
	作ります。
	
	//このRTはしょせんテクスチャです
	//なので、ここに書き込んでも画面には表示されません
	int RT=MakeScreen(幅、高さ);
	SetDrawScreen(RT);//描画前にレンダーターゲットをRTにしておく
	
	通常描画(Draw)
	
	今のままでは画面に映らないので
	//ここで、BACKに戻す(この時点ではBACKに何も書かれていない)
	SetDrawScreen(DX_SCREEN_BACK);
	
	//ここで画面揺れのためのoffset.x,yを作って次のDrawGraphの座標に+する
	だが、揺れを急に止めるのは不自然になるので、徐々に緩やかにしないといけない(揺れの数字に0.9かけるなど)
	DrawGraph(0,0,screenWidth,screenHeight,RT,false);//RTに描画されているものの画像をバックバッファに表示
	
	(略)
	ScreenFlip();
	
	