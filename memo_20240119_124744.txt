数学の時のコツ
1.変数と定数をばっちり分けて考える
	f(x)=ax+b;xのみが変数  //f関数(引数x)
	g(x)=a*xの二乗+bx+c; xのみが変数
2.定義と定理(公式)を分けて考えよう
	定義:変えてはいけない(覚えなくちゃいけない)
		->標準関数で用意されてることがほとんど
		sin,cos,tan,atan2,sqrt,+-*/も
	定理:計算を楽にする便利公式(関数)
		->自分で作れる
		->自分で関数を作る
3.物理的なものを取り扱うときは、どの力がどの軸に作用するか
	ということを意識しよう
	重力に関していうと、基本的にY方向にしか作用しないので
	まずYについて説いてから、残りの軸の計算をしよう。
4.Σとか∫が出てきたら「合計！」ってとらえよう
	じゃあ何が違うのか・・・
	Σはデジタル。進み方が決まっている(等分割だったり、配列だったり)
	->配列の添え字を定義できる
	いわゆる漸化式であらわせるもの
	
	∫(インテグラル)はアナログ(実数全体),デジタルでは計算できないため
	自分で計算できない場合(コンピュータに任せる場合)は全数検査ではなく代表検査のようにする
	代表検査するときに使われるのが乱数です。乱数を代表データとして計算
	
一定の速度なら長方形の面積(時間＊速度)
加速があるなら三角形
初速度があって加速するなら台形

長方形部分＋三角形部分

川野先生のコーディングルール
1.英語を間違えない(不安だったら調べる)
2.メンバ変数のおしりに_
3.定数はsnake_case.変数はcamelcase
4.変数は先頭小文字、関数は先頭大文字
	クラス名、構造体名も先頭大文字
5.基本的には｛はステートのおしりに書く
	（自動成型で改行されることもある）
6.長すぎる型名、わかりづらい型名ではusingを使用
7.関数は基本的に一画面に収まるように書く

キャラクターに「状態」を作る


例えば格ゲーなら
・ダウン中に相手は攻撃ができない(当たり判定がない)
・ダウン中は操作が聞かない
・空中にいる間は落下する
・地面上のキックと空中のキックは違う
このようににいろいろと状態が存在する
この状態がいろいろ存在するが、切り替え可能な状態と、できない状態がある

アイドル->ぱんち、歩き、ジャンプなどはできるが
パンチキックしながら歩けない(状態遷移)

状態遷移をわかりやすくするために
状態遷移図や状態遷移表を書いたほうがいい(できればどちらも)

実装についてですが、各状態をメンバ関数ポインタを使って表現します
NeutralUpdate
JumpUpdate
AerialUpdate
AttackUpdate
JumpAttackUpdate()
などです
で、状態の変化もpublic関数化しておく
Jump()
Punch()
Kick()
Damage()