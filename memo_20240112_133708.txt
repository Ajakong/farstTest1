画像ファイルフォーマット
cmp->Bitmap
jpg->Jpeg
png->PNG
tga->Targadds->DirectDrawSurface

フォーマットが違うと中身が全然違う

画像ファイルフォーマットとは、バイナリデータをどう解釈して画像として使用するかというのを表している

たいていの画像フォーマットは圧縮されてる
待った喝取腐れてないフォーマット
rawファイル(バイナリで0xffaabb)みたいに
がぞうのRGBがバイナリで保存している
ppmファイル->RGBをテキストで保存
			255,64,128みたいに
			
この辺はゲームでは使わない

BMPも基本的には圧縮されてないが
場合によって圧縮されている
256*256*4=262144
256*256*1=65535+4*256=65535+1024=66059
このように使用するバイト数が大体4分の１程度になる

ゲームプログラマーに限らず
可逆・不可逆のフォーマットについては
把握しておいたほうがいい

不可逆圧縮の代表格はjpgとddsですが

DDS-＞windows用、種類がありDXT~DXT7まである
これは基本的に3Dテクスチャとして使用されることを想定したものです

3Dを想定している関係上「みっぷまっぷ 」が含まれていたりする
ミップマップとはモアレが発生しないように事前にフォトショなどの品質の高い
縮小アルゴリズムで縮小画像を作っておいて
それを小さく表示する際に使う→モアレが軽減
DXT1->アルファがない(圧縮サイズが1/4)
DXT2,3->アルファあり(圧縮サイズが1/2)
DXT4,5->アルファあり(圧縮サイズが1/2)
DXT7->アルファあり(圧縮サイズが1/2)


android用は
ETC1~7とか
Apple系ではPVRTC1~7が使用されています

で、どれもあまり品質は良くない
でも使われるのはなぜか

画像ファイルのロードについて考えます
で、最終的に画面に表示するにはVRAMに画像データがないと表示できません

実は、VRAM上においてはBMPだろうがPNGだろうが
全部RGBAにデータの塊に変換されます(BRAMはRGBにデータの塊しかあつかえない)
つまり、最終目的地前にサイズがめっちゃ増える
さらに面倒なことにサイズが2のn乗の値になる(168->256)みたいに

PNGだったら場合によってはVRAMに行くときにサイズが
10倍~100倍くらいに膨れ上がる
なので、これについては注意しておきましょう

で、先ほど話したDDSは圧縮したままVRAMに送れる
なので使われる

まあDDSは圧縮率が悪いためDDS->Zipにされることはある

で、ここまでの話で実は「画像データを求める」ことの
メリットにかかわる部分があります。それは自動で2のn乗されるところです。
そのため画像をひとまとめにしたほうがよ、良い・・・

そこでfreeTexturePacker
これを用いることで何百枚という画像が一つの画像になる
これによって、
1.サイズのコスト
2.ロードのコスト
3.VRAM転送のコスト
4.VRAMメモリのコスト
5.テクスチャフェッチのコスト

2DのアニメーションやたくさんンおUIを使用する際は
画像をまとめた「テクスチャアトラス」にしたほうがいいです

なので。マップ系もそうですが、マリオを作るときなど
ブロック一つ一つを一つのファイルとして扱うのではなく
テクスチャアトラスとしてまとめて使ったほうが効率が良いです

その時に表示に使うのがDrawRectGraphやDrawRect〇〇です(切り取る座標を指定する関数)

FreeTexturePackerは基本的にまとめた画像と切り抜き情報を
出力します

切り抜き情報は
Trim->ONで
JSON(Array)で出力します。ただし、実行時にテキストファイルを
解析していくのはしんどいので事前にコンバートアプリを使用し
バイナリに変換をしておきます
今回はC#を用いて変換ツールを作った

データは基本的にヘッダ部とデータ部に分かれています
ヘッダ部にはたいていデータ数もしくはデータサイズが格納されているので時tデータを読み込む

std::stringというのは実際のところvector<char>と同じです

stringはvector<char>二に便利な関数が追加されただけ
